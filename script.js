document.addEventListener("DOMContentLoaded", () => {
  const screenSaver = document.getElementById("screenSaver");
  const dvdLogo = document.getElementById("dvdLogo");

  // --- 이미지 목록 생성 ---
  const manualFiles = [
    // 여기에 규칙 없는 파일 추가. 예: 'img/special.gif'
  ];

  const imagePath = "img/";
  const baseName = "psy_pudding_still_";
  const extension = ".png";
  const startNumber = 100;
  const endNumber = 165;
  
  const totalImages = endNumber - startNumber + 1;

  const autoGeneratedFiles = [];
  for (let i = 0; i < totalImages; i++) {
    const fileNumber = startNumber + i;
    const fileName = `${imagePath}${baseName}${fileNumber}${extension}`;
    autoGeneratedFiles.push(fileName);
  }

  const imageFiles = [...manualFiles, ...autoGeneratedFiles];

  // --- 변수 선언 및 초기화 ---
  let imageObjects = [];
  let currentImageIndex = 0;
  let x = 0;
  let y = 0;
  let dx = 2;
  let dy = 2;
  let logoWidth;
  let logoHeight;
  let screenWidth;
  let screenHeight;
  let animationStarted = false;

  // --- 모바일 뷰포트 높이 문제를 해결하기 위한 함수 ---
  const setRealViewportHeight = () => {
    const vh = window.innerHeight;
    document.documentElement.style.setProperty('--app-height', `${vh}px`);
  };

  /**
   * 이미지의 실제 콘텐츠 영역(투명 픽셀 제외)을 분석합니다.
   */
  function analyzeImageBounds(src) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.src = src;

      img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d', { willReadFrequently: true });
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);

        try {
          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
          let minX = canvas.width, minY = canvas.height, maxX = -1, maxY = -1;

          for (let y = 0; y < canvas.height; y++) {
            for (let x = 0; x < canvas.width; x++) {
              const alpha = imageData[(y * canvas.width + x) * 4 + 3];
              if (alpha > 0) {
                if (x < minX) minX = x;
                if (x > maxX) maxX = x;
                if (y < minY) minY = y;
                if (y > maxY) maxY = y;
              }
            }
          }

          if (maxX > -1) {
            resolve({ minX, minY, width: maxX - minX + 1, height: maxY - minY + 1 });
          } else {
            resolve({ minX: 0, minY: 0, width: 0, height: 0 });
          }
        } catch (e) {
          console.error(`이미지 분석 실패(CORS 정책 위반 가능성): ${src}`, e);
          resolve({ minX: 0, minY: 0, width: img.width, height: img.height });
        }
      };
      
      img.onerror = () => reject(new Error(`이미지 로드 실패: ${src}`));
    });
  }

  // --- 초기 설정 함수 (비동기 처리) ---
  async function initializeScreenSaver() {
    setRealViewportHeight();

    if (imageFiles.length === 0) {
      console.error("이미지 파일 목록이 비어있습니다. 스크린세이버를 시작할 수 없습니다.");
      dvdLogo.style.display = 'none';
      return;
    }

    try {
      console.log("이미지 경계 분석을 시작합니다... (잠시 기다려주세요)");
      const analysisPromises = imageFiles.map(src => 
        analyzeImageBounds(src).then(bounds => ({ src, bounds }))
      );
      imageObjects = await Promise.all(analysisPromises);
      console.log("모든 이미지 분석 완료!");
    } catch (error) {
        console.error("이미지 분석 중 심각한 오류 발생:", error);
        dvdLogo.style.display = 'none';
        return;
    }

    updateScreenDimensions();
    resizeLogo();

    x = Math.random() * (screenWidth - logoWidth);
    y = Math.random() * (screenHeight - logoHeight);
    dvdLogo.style.transform = `translate(${x}px, ${y}px)`;

    currentImageIndex = Math.floor(Math.random() * imageObjects.length);
    dvdLogo.src = imageObjects[currentImageIndex].src;
    
    // (추가) 초기 이미지 로그 출력
    console.log(`초기 이미지: ${imageObjects[currentImageIndex].src}`);

    if (!animationStarted) {
      requestAnimationFrame(animate);
      animationStarted = true;
    }
  }

  // --- 이미지 크기 조절 함수 ---
  function resizeLogo() {
    const dynamicWidth = document.documentElement.clientWidth * 0.15;
    dvdLogo.style.width = `${dynamicWidth}px`;
    dvdLogo.style.height = `${dynamicWidth}px`;

    logoWidth = dvdLogo.offsetWidth;
    logoHeight = dvdLogo.offsetHeight;
  }

  // --- 화면 크기 업데이트 함수 ---
  function updateScreenDimensions() {
    screenWidth = document.documentElement.clientWidth;
    screenHeight = document.documentElement.clientHeight;
  }

  // --- 애니메이션 루프 ---
  function animate() {
    x += dx;
    y += dy;

    const currentImage = imageObjects[currentImageIndex];
    const naturalWidth = dvdLogo.naturalWidth || logoWidth;
    const naturalHeight = dvdLogo.naturalHeight || logoHeight;
    const bounds = currentImage.bounds;

    const scaleX = logoWidth / naturalWidth;
    const scaleY = logoHeight / naturalHeight;

    const visualLeft = x + (bounds.minX * scaleX);
    const visualRight = x + ((bounds.minX + bounds.width) * scaleX);
    const visualTop = y + (bounds.minY * scaleY);
    const visualBottom = y + ((bounds.minY + bounds.height) * scaleY);

    let hit = false;

    if (visualRight >= screenWidth) {
      x = screenWidth - ((bounds.minX + bounds.width) * scaleX);
      dx *= -1;
      hit = true;
    } else if (visualLeft <= 0) {
      x = -(bounds.minX * scaleX);
      dx *= -1;
      hit = true;
    }

    if (visualBottom >= screenHeight) {
      y = screenHeight - ((bounds.minY + bounds.height) * scaleY);
      dy *= -1;
      hit = true;
    } else if (visualTop <= 0) {
      y = -(bounds.minY * scaleY);
      dy *= -1;
      hit = true;
    }
    
    if (hit) {
      changeImage();
    }

    dvdLogo.style.transform = `translate(${x}px, ${y}px)`;
    requestAnimationFrame(animate);
  }

  /**
   * 이미지를 랜덤으로 변경하고, 콘솔에 로그를 출력하는 함수
   */
  function changeImage() {
    let newIndex;
    if (imageObjects.length > 1) {
        do {
            newIndex = Math.floor(Math.random() * imageObjects.length);
        } while (newIndex === currentImageIndex);
    } else {
        newIndex = 0;
    }

    currentImageIndex = newIndex;
    dvdLogo.src = imageObjects[currentImageIndex].src;
    
    // (추가) 이미지 변경 로그 출력
    console.log(`이미지 변경: ${imageObjects[currentImageIndex].src}`);
  }

  // --- 윈도우 크기 변경 이벤트 ---
  window.addEventListener("resize", () => {
    setRealViewportHeight();
    updateScreenDimensions();
    resizeLogo();
    
    x = Math.max(0, Math.min(x, screenWidth - logoWidth));
    y = Math.max(0, Math.min(y, screenHeight - logoHeight));
    dvdLogo.style.transform = `translate(${x}px, ${y}px)`;
  });

  // --- 스크린 세이버 시작 ---
  initializeScreenSaver();
});